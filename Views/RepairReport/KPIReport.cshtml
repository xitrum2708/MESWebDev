@using MESWebDev.Services
@model MESWebDev.Models.UVASSY.VM.ReportVM
@inject ITranslationService T
@{
    var languageCode = Context.Session.GetString("LanguageCode") ?? "vi";
    ViewData["Title"] = T.GetTranslation("KPIReport",languageCode);
    var years = Model.YearList ?? new List<int>();
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}
@section ContentHeader {
    @await Html.PartialAsync("_Breadcrumb", ViewBag.Breadcrumbs as List<MESWebDev.DTO.BreadcrumbItemDto>)
}
<div class="app-content">
    <div class="container-fluid">        
        <form method="post" onsubmit="showLoadingOverlay()">
            <div class="d-flex flex-wrap align-items-end">
                <div class="form-group mx-2 py-1" style="min-width:180px">
                    <label for="SelectedYear">@T.GetTranslation("Year",languageCode)</label>
                    <select asp-for="SelectedYear" class="form-select">
                        @foreach (var year in years)
                        {
                            <option value="@year" selected="@(year == Model.SelectedYear)">@year</option>
                        }
                    </select>
                </div>
                <div class="form-group mx-2 py-1" style="min-width:180px">
                    <label for="startWeek">@T.GetTranslation("StartWeek",languageCode)</label>
                    <input asp-for="startWeek" class="form-control" type="number" min="1" max="52" />
                </div>
                <div class="form-group mx-2 py-1" style="min-width:180px">
                    <label for="endWeek">@T.GetTranslation("EndWeek",languageCode)</label>
                    <input asp-for="endWeek" class="form-control" type="number" min="1" max="52" />
                </div>
                <div class="form-group mx-2 py-1">
                    <button type="submit" class="btn btn-primary">@T.GetTranslation("Search",languageCode)</button>
                </div>
            </div>
        </form>

        <hr />

        <div class="row">
            <div class="col-md-6">
                <h4>@T.GetTranslation("MonthlyReportChart",languageCode)</h4>
                <canvas id="monthlyChart"></canvas>

                <h4 class="mt-4">@T.GetTranslation("MonthlyDetail",languageCode)</h4>
                <div style="overflow-x: auto">
                    <table class="table table-bordered">
                        <thead>
                            <tr>
                                @foreach (System.Data.DataColumn column in Model.MonthlyDetailTable.Columns)
                                {
                                    <th>@column.ColumnName</th>
                                }
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (System.Data.DataRow row in Model.MonthlyDetailTable.Rows)
                            {
                                <tr>
                                    @for (int i = 0; i < row.ItemArray.Length; i++)
                                    {
                                        var column = Model.MonthlyDetailTable.Columns[i];
                                        var value = row.ItemArray[i];
                                        if (column.ColumnName == "Year")
                                        {
                                            <td>@value</td>
                                        }
                                        else if (value is int || value is long || value is decimal)
                                        {
                                            <td>@String.Format(System.Globalization.CultureInfo.InvariantCulture, "{0:#,#}", value)</td>
                                        }
                                        else
                                        {
                                            <td>@value</td>
                                        }
                                    }
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>

            <div class="col-md-6">
                <h4>@T.GetTranslation("WeeklyReportChart",languageCode) </h4>
                <canvas id="weeklyChart"></canvas>

                <h4 class="mt-4">@T.GetTranslation("WeeklyDetail", languageCode)</h4>
                <div style="overflow-x: auto">
                    <table class="table table-bordered">
                        <thead>
                            <tr>
                                @foreach (System.Data.DataColumn column in Model.WeeklyDetailTable.Columns)
                                {
                                    <th>@column.ColumnName</th>
                                }
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (System.Data.DataRow row in Model.WeeklyDetailTable.Rows)
                            {
                                <tr>
                                    @foreach (var item in row.ItemArray)
                                    {
                                        var value = item;
                                        if (value is int || value is long || value is decimal)
                                        {
                                            <td>@String.Format(System.Globalization.CultureInfo.InvariantCulture, "{0:#,#}", value)</td>
                                        }
                                        else
                                        {
                                            <td>@value</td>
                                        }
                                    }
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

    </div>
</div>
@section Scripts {
    <script src="~/js/chart.js"></script>
    <script src="~/js/chartjs-plugin-datalabels.js"></script>
    <script>
        const formatThousands = value => value.toLocaleString();
        const createChartWithLabels = (ctxId, labels, datasets) => {
            return new Chart(document.getElementById(ctxId), {
                type: 'bar',
                data: {
                    labels: labels,
                    datasets: datasets
                },
                options: {
                    plugins: {
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    return context.dataset.label + ': ' + formatThousands(context.raw);
                                }
                            }
                        },
                        datalabels: {
                            display: true,
                            align: 'end',
                            anchor: 'end',
                            formatter: value => formatThousands(value)
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                callback: formatThousands
                            }
                        },
                        y1: {
                            type: 'linear',
                            position: 'right',
                            beginAtZero: true,
                            grid: { drawOnChartArea: false },
                            ticks: {
                                callback: formatThousands
                            }
                        }
                    }
                },
                plugins: [ChartDataLabels]
            });
        };

        createChartWithLabels('monthlyChart',
        @Html.Raw(Json.Serialize(Model.MonthlyData.Select(x => x.Month))),
            [
                {
                    label: 'Input',
                    data: @Html.Raw(Json.Serialize(Model.MonthlyData.Select(x => x.InputQuantity))),
                    backgroundColor: 'rgba(54, 162, 235, 0.6)'
                },
                {
                    label: 'NG',
                    data: @Html.Raw(Json.Serialize(Model.MonthlyData.Select(x => x.NGQuantity))),
                    backgroundColor: 'rgba(255, 99, 132, 0.6)'
                },
                {
                    label: 'TPPM',
                    type: 'line',
                    data: @Html.Raw(Json.Serialize(Model.MonthlyData.Select(x => x.Tppm))),
                    borderColor: 'rgba(255, 206, 86, 1)',
                    yAxisID: 'y1'
                }
            ]);

        createChartWithLabels('weeklyChart',
        @Html.Raw(Json.Serialize(Model.WeeklyData.Select(x => x.Week))),
            [
                {
                    label: 'Input',
                    data: @Html.Raw(Json.Serialize(Model.WeeklyData.Select(x => x.InputQuantity))),
                    backgroundColor: 'rgba(54, 162, 235, 0.6)'
                },
                {
                    label: 'NG',
                    data: @Html.Raw(Json.Serialize(Model.WeeklyData.Select(x => x.NGQuantity))),
                    backgroundColor: 'rgba(255, 99, 132, 0.6)'
                },
                {
                    label: 'TPPM',
                    type: 'line',
                    data: @Html.Raw(Json.Serialize(Model.WeeklyData.Select(x => x.Tppm))),
                    borderColor: 'rgba(255, 206, 86, 1)',
                    yAxisID: 'y1'
                }
            ]);
    </script>
    
}
