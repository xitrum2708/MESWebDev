@* @using MESWebDev.Models.UVASSY
@using MESWebDev.Models.VM
@model List<UVAssyAllOutputResult> *@
@model DashboardViewModel;
@using System.Text.Json;
@using System.Data;
@using System.Globalization
@{
    ViewData["Title"] = "Dashboard";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}
@{
    var culture = CultureInfo.GetCultureInfo("en-US");
    bool IsNumeric(Type t) => t == typeof(byte) || t == typeof(sbyte) || t == typeof(short) || t == typeof(ushort)
                           || t == typeof(int) || t == typeof(uint) || t == typeof(long) || t == typeof(ulong)
                           || t == typeof(float) || t == typeof(double) || t == typeof(decimal);
    string FormatCell(object v, Type t)
    {
        if (v == null || v is DBNull) return "";
        if (IsNumeric(t) && v is IFormattable f) return f.ToString("#,0.##########", culture);
        if (t == typeof(DateTime)) return ((DateTime)v).ToString("yyyy/MM/dd HH:mm:ss", culture);
        return v.ToString();
    }
    string baseTd = "bg-primary text-white py-1 fs-8"; // KHÔNG có text-center
}

@section ContentHeader {
<div class="app-content-header">
    <div class="container-fluid">
        <div class="row">
            <div class="col-sm-12">
                <ol class="breadcrumb float-sm-end d-flex justify-content-center align-content-center" style="margin-bottom:0px !important">
                    <li class="breadcrumb-item text-black fw-bold">HOME</li>
                    <li class="breadcrumb-item active fw-bold" aria-current="page">IQC DASHBOARD</li>
                </ol>
            </div>
        </div>
    </div>
</div>
}

<div class="app-content">
   
    <div class="container-fluid p-0 m-0 px-5">
        <!-- HEADER -->
        <div class="row text-center sticky-top p-0 m-0">
            <div class="col-md-3 d-flex align-items-center justify-content-center">
                <!-- <h4>Info</h4> -->
            </div>
            <div class="col-md-6">
                <div class="iqc-shape">IQC INSPECT DASHBOARD</div>
            </div>
            <div class="col-md-3 d-flex align-items-center justify-content-center">
                <h4 id="clock"></h4>
            </div>
        </div>
        <!-- SUMARY -->
        @if(Model.sum_data != null && Model.sum_data.Rows.Count > 0)
        {
            <div class="row my-2">
                <div class="col-8 d-flex flex-column justify-content-end pb-5">
                <div class="row g-2 align-items-center  mx-2 mb-2" >
                    <div class="col">
                        <div class="inspect-box p-2 border-bottom border-light border-5">
                            <font class="fs-7 fw-bold">INSPECTING</font>
                            <h1 class="fw-bold">@Model.sum_data.Rows[0][0]</h1>
                        </div>
                    </div>
                    <div class="col">
                        <div class="inspect-box p-2 border-bottom border-warning border-5">
                            <font class="text-warning fs-7 fw-bold">WAITING INSPECT</font>
                            <h1 class="text-warning fw-bold">@Model.sum_data.Rows[0][1]</h1>
                        </div>
                    </div>
                    <div class="col">
                        <div class="inspect-box p-2 border-bottom border-primary border-5">
                            <font class="text-primary fs-7 fw-bold">INSPECTED TODAY</font>
                            <h1 class="text-primary fw-bold">@Model.sum_data.Rows[0][2]</h1>
                        </div>
                    </div>
                    <div class="col">
                        <div class="inspect-box p-2 border-bottom border-info border-5">
                                <font class="fw-bold fs-7 text-info">STOCK IN TODAY</font>
                            <h1 class="fw-bold text-info">@Model.sum_data.Rows[0][3]</h1>
                        </div>
                    </div>
                    <div class="col">
                           <div class="inspect-box p-2 border-bottom border-success border-5">
                                <font class="fw-bold fs-6 text-success">OK</font>
                                <h4 class="fw-bold text-success">@Model.sum_data.Rows[0][4]</h4>
                                <h4 class="fw-bold text-success">@Model.sum_data.Rows[0][5]</h4>
                            @* <h1 class="fw-bold text-success"> - </h1> *@
                        </div>
                    </div>
                        <div class="col">
                            <div class="inspect-box p-2 border-bottom border-danger border-5">
                                <font class="fw-bold fs-6 text-danger">NG</font>

                                <h4 class="fw-bold text-danger">@Model.sum_data.Rows[0][6]</h4>
                                <h4 class="fw-bold text-danger">@Model.sum_data.Rows[0][7]</h4>
                                @* <h1 class="fw-bold text-success"> - </h1> *@
                            </div>
                        </div>
      @*               <div class="col">
                        <div class="inspect-box p-2 border-bottom border-error border-5">
                                <font class="fw-bold fs-7 text-error">NG - RATE</font>
                                <h1 class="fw-bold text-error">@Model.sum_data.Rows[0][6] - @Model.sum_data.Rows[0][7]</h1>
                        </div>
                    </div> *@
                    
                </div>
                    <form method="post" asp-action="IQCDashboardSearch">
                        <div class="d-flex justify-content-center align-items-center">
                            <!-- StartDate -->
                            <div class="form-group mx-2 py-1" style="min-width: 180px;">
                                @* <label>@translate.GetTranslation("StartDate", languageCode):</label> *@
                                <input id="startDate" type="date" name="startDate" class="form-control"
                                        value="@(Model.StartDate.HasValue ? Model.StartDate.Value.ToString("yyyy-MM-dd") : "")" />
                            </div>
                            <div>
                                <font class="fs-6 fw-bold"> ~ </font>
                            </div>
                            <!-- EndDate -->
                            <div class="form-group mx-2 py-1" style="min-width: 180px;">
                                @* <label>@translate.GetTranslation("EndDate", languageCode):</label> *@
                                <input id="endDate" type="date" name="endDate" class="form-control"
                                        value="@(Model.EndDate.HasValue ? Model.EndDate.Value.ToString("yyyy-MM-dd") : "")" />
                            </div>
                            <button title="Search" class="btn btn-sm btn-info me-2">
                                <i class="bi bi-search"></i>
                            </button>
                        </div>
                    </form>
                </div>
                <div class="col-4 d-flex align-items-center justify-content-center">
                    <div class="p-2 px-4 inspect-result d-flex align-items-center justify-content-center mx-5 mb-1" style="height: 200px;">
                        <h5 class="mt-4 mb-0">DISTRIBUTION OF DETECTS</h5>
                        <!-- <h1>0</h1> -->
                        <canvas id="myDoughnutChart" class="p-0 m-0" width="200" height="200"></canvas>
                    </div>
                </div>
            </div>
        }
        <!-- TABLE -->
        @if (Model.detail_data != null && Model.detail_data.Rows.Count > 0)
        {
            <div class="row mb-1 overflow-auto" style="height: calc(100vh - 470px)">
                <div class="col-12">
                    <table class="table">
                        <thead>
                            <tr class="table sticky-top" style="background-color: #00c0ff; padding: 0 3px;">
                                @foreach(DataColumn col in Model.detail_data.Columns)
                                {
                                    <th>@col.Caption</th>
                                }
                            </tr>
                        </thead>
                        <tbody>
                           @*  @foreach (DataRow row in Model.detail_data.Rows)
                            {
                                <tr>
                                    @foreach (var f in row.ItemArray)
                                    {
                                        <td>@f?.ToString()</td>
                                    }
                                </tr>
                            } *@
                            @foreach (DataRow row in Model.detail_data.Rows)
                            {
                                <tr>
                                    @for (int c = 0; c < Model.detail_data.Columns.Count; c++)
                                    {
                                        var col = Model.detail_data.Columns[c];
                                        var v = row[c];
                                        bool isNum = !(v is DBNull || v == null) && IsNumeric(col.DataType);
                                        <td class="@($"{baseTd} {(isNum ? "text-end" : "text-start")}")">
                                            @FormatCell(v, col.DataType)
                                        </td>
                                    }
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        }

    </div>
</div>
<!-- Loading Overlay -->
<div id="loadingOverlay"
     class="position-fixed top-0 start-0 w-100 h-100 d-none d-flex align-items-center justify-content-center"
     style="background: rgba(255,255,255,0.7); z-index: 9999;">
    <div class="spinner-border text-success fw-bold" role="status" style="width: 3rem; height: 3rem;">
        <span class="visually-hidden">Loading...</span>
    </div>
</div>

@section Scripts {
    <link href="~/css/dashboard.css?@DateTime.Now.Ticks" rel="stylesheet" />

    <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
                // Check date and show loading page
        document.querySelector('form').addEventListener('submit', function(e) {
            const startDate = document.querySelector('input[name="startDate"]').value;
            const endDate = document.querySelector('input[name="endDate"]').value;

            if (startDate && endDate && new Date(startDate) > new Date(endDate))
            {
                e.preventDefault();
                toastr.error('Start Date cannot be later than End Date.');
            }
            else{
                document.getElementById("loadingOverlay").classList.remove("d-none");
            }

        });

        //--------------------->> TABLE <<-------------------------------
          $(document).ready(function () {
          $('table thead th').each(function (index) {
              $(this).css({
                  'background-color': '#00c0ff',
                  'padding': '25px 0px'
              });
              $(this).addClass('fs-6 p-0 mx-2 fw-bold text-center');
          });

          $('table tbody tr').each(function (index) {
              const $tds = $(this).find('td');
            if ((index + 1) % 2 === 0) {
              //$(this).find('td').addClass('bg-primary text-center text-white py-1 fs-8');
               $tds.removeClass('text-center')                  // quan trọng: bỏ center
              .addClass('bg-primary text-white py-1 fs-8') // chỉ màu + style
              .css('background-color', '');

            } else {
              // $(this).find('td').removeClass('bg-primary');// Clear any inline styles
              // $(this).find('td').addClass('text-white text-center py-1 fs-8')
              // $(this).find('td').css({'background-color':'#1c2b88'})
              // $(this).find('td').removeClass('bg-primary text-white');
               $tds.removeClass('bg-primary text-center')       // bỏ center
                .addClass('text-white py-1 fs-8')
                .css('background-color', '#1c2b88');
            }
          });
        });

        //--------------------->> LOCK <<-------------------------------
        function updateClock() {
          const now = new Date();

          const year = now.getFullYear();
          const month = String(now.getMonth() + 1).padStart(2, '0');
          const day = String(now.getDate()).padStart(2, '0');
          const hour = String(now.getHours()).padStart(2, '0');
          const minute = String(now.getMinutes()).padStart(2, '0');
          const second = String(now.getSeconds()).padStart(2, '0');

          const formatted = `${year}-${month}-${day} ${hour}:${minute}:${second}`;

          document.getElementById('clock').textContent = formatted;
        }

        // Update immediately and every second
        updateClock();
        setInterval(updateClock, 1000);



        //-------------------->> CHART <<-----------------------------
        const chartData = @Html.Raw(Json.Serialize(Model.chart_data));
        if(chartData && chartData.length >0){
                    const labels = chartData.map(item => item.label);
        const values = chartData.map(item => item.value);
        const total = values.reduce((sum, val) => sum + val, 0);

        const ctx = document.getElementById('myDoughnutChart').getContext('2d');

        new Chart(ctx, {
            type: 'doughnut',
            data: {
                labels: labels,
                datasets: [{
                    data: values,
                    backgroundColor: [
                      '#28a745', // green
                      '#dc3545', // red
                      '#ffc107', // yellow
                      '#0dcaf0', // cyan
                      '#6f42c1', // purple
                      '#fd7e14', // orange
                      '#20c997', // teal
                      '#6610f2', // indigo
                      '#198754', // dark green
                      '#e83e8c', // pink
                      '#17a2b8', // info blue
                      '#343a40', // dark gray
                      '#adb5bd', // light gray
                      '#ff6384', // soft red
                      '#36a2eb', // soft blue
                      '#ff9f40', // soft orange
                      '#4bc0c0', // turquoise
                      '#9966ff', // violet
                      '#c9cbcf', // light silver
                      '#f94144', // coral red
                    ],
                    borderWidth: 1
                }]
            },
            options: {
                responsive:true,
                maintainAspectRatio:false,
                plugins: {
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                const value = context.raw;
                                const percent = ((value / total) * 100).toFixed(1);
                                return `${context.label}: ${value} (${percent}%)`;
                            }
                        }
                    },
                    legend: {
                        //display:false
                        position: 'right',
                        labels:{
                            boxWidth: 40,
                            padding: 5,
                            color: '#ffffff',
                            font:{
                                size:8
                            }
                        }
                    }
                }
            }
        });
        }

    </script>
}