@* @using MESWebDev.Models.UVASSY
@using MESWebDev.Models.VM
@model List<UVAssyAllOutputResult> *@
@model DashboardViewModel;
@using System.Text.Json;
@using System.Data;
@{
    ViewData["Title"] = "Dashboard";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}
@section ContentHeader {
<div class="app-content-header">
    <div class="container-fluid">
        <div class="row">
            <div class="col-sm-12">
                <ol class="breadcrumb float-sm-end d-flex justify-content-center align-content-center" style="margin-bottom:0px !important">
                    <li class="breadcrumb-item text-black fw-bold">HOME</li>
                    <li class="breadcrumb-item active fw-bold" aria-current="page">SMT DASHBOARD</li>
                </ol>
            </div>
        </div>
    </div>
</div>
}
<div class="app-content">
    <div class="container-fluid p-0 px-5">
        <!-- HEADER -->
        <div class="row text-center">
            <div class="col-md-3 d-flex align-items-center justify-content-center">
                <!-- <h4>Info</h4> -->
            </div>
            <div class="col-md-6">
                <div class="iqc-shape">SMT WORKSHOP DASHBOARD</div>
            </div>
            <div class="col-md-3 d-flex align-items-center justify-content-center">
                <h4 id="clock"></h4>
            </div>
        </div>
        <!-- SUMARY -->
        <div class="row mt-3">

            <!-- LEFT SIDE  -->
            <div class="col-7 d-flex flex-column">

                @if(Model.sum_data != null && Model.sum_data.Rows.Count > 0)
                {
                    <div class="row g-3 align-items-between">
                        <div class="col">
                            <div class="reg-box p-2 border-bottom border-warning border-5">
                                <font class="text-warning fs-7 fw-bold">NOT START</font>
                                <h1 class="text-warning fw-bold">@Model.sum_data.Rows[0][0]</h1>
                            </div>
                        </div>
                        <div class="col">
                            <div class="reg-box p-2 border-bottom border-info border-5">
                                <font class="text-info fs-7 fw-bold">IN PRODUCTION</font>
                                <h1 class="text-info fw-bold">@Model.sum_data.Rows[0][1]</h1>
                            </div>
                        </div>
                        <div class="col">
                            <div class="reg-box p-2 border-bottom border-success border-5">
                                <font class="text-success fs-7 fw-bold">TO BE FINISHED</font>
                                <h1 class="text-success fw-bold">@Model.sum_data.Rows[0][2]</h1>
                            </div>
                        </div>
                        <div class="col">
                            <div class="reg-box p-2 border-bottom border-danger border-5">
                                <font class="text-danger  fs-7 fw-bold">DELAYED</font>
                                <h1 class="text-danger fw-bold">@Model.sum_data.Rows[0][3]</h1>
                            </div>
                        </div>
                    </div>
                }

                <div class="row mt-3 mb-1">
                    <font class="text-start fs-6 text-light fw-bold">ORDER PROGRESS</font>
                    <hr />
                </div>

                @if (Model.detail_data != null && Model.detail_data.Rows.Count > 0)
                {
                    <div class="row row-cols-2 g-2 overflow-auto" style="height:calc(100vh - 370px)">
                        @foreach (DataRow row in Model.detail_data.Rows)
                        {
                            <!-- DIV 1 -->
                            <div>
                                <div class="col-12 detail p-3 border border-2 border-info">
                                    <div class="row mb-3">
                                        <div class="col-12">
                                            <div class="row">
                                                <div class="col-4 text-start text-label">LINE</div>
                                                <div class="col-8 ps-2 text-start text-value">
                                                    :
                                                    @(((row["Line"] ?? string.Empty).ToString()).ToUpper())
                                                </div>
                                            </div>
                                            <div class="row">
                                                <div class="col-4 text-start text-label">MODEL</div>
                                                <div class="col-8 ps-2 text-start text-value">
                                                    :
                                                    @(((row["Model"] ?? string.Empty).ToString()).ToUpper())
                                                </div>
                                            </div>
                                            <div class="row">
                                                <div class="col-4 text-start text-label">LOT NO</div>
                                                <div class="col-8 ps-2 text-start text-value">
                                                    :
                                                    @(((row["LotNo"] ?? string.Empty).ToString()).ToUpper())
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row g-2 d-flex justify-content-center align-items-center">
                                        <div class="col d-flex flex-column justify-content-between align-items-center">
                                            <font class="text-label">Planned</font>
                                            <font class="text-value">@Convert.ToInt32(row["PlanQty"] ?? 0)</font>
                                        </div>
                                        <div class="col d-flex flex-column justify-content-between align-items-center">
                                            <font class="text-label">Input</font>
                                            <font class="text-value">@Convert.ToInt32(row["InputQty"] ?? 0)</font>
                                        </div>
                                        <div class="col d-flex flex-column justify-content-center align-items-center">
                                            <font class="text-label">Output</font>
                                            <font class="text-value">@Convert.ToInt32(row["OutputQty"] ?? 0)</font>
                                        </div>
                                        <div class="col d-flex flex-column justify-content-center align-items-center">
                                            <font class="text-label">Rate</font>
                                            <font class="text-value">@Convert.ToInt32(row["Rate"] ?? 0)%</font>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
            </div>

            <!-- RIGHT SIDE -->
            <div class="col-5 d-flex flex-column ">

                <div class="row mb-1">
                    <font class="text-start fs-6 text-light fw-bold">ORPERATION TASK</font>
                    <hr />
                </div>
                @if (Model.detail_data2 != null && Model.detail_data2.Rows.Count > 0)
                {
                    <div class="overflow-y-auto" style="height:calc(100vh - 1300px); min-height:220px;">
                        <!-- TABLE -->
                        <table class="table" id="tblDetail2">
                            <thead class="sticky-top">
                                <tr>
                                    @foreach (DataColumn col in Model.detail_data2.Columns)
                                    {
                                        <th>@col.Caption</th>
                                    }
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (DataRow row in Model.detail_data2.Rows)
                                {
                                    <tr>
                                        @foreach (var f in row.ItemArray)
                                        {
                                            <td>@(f ?? string.Empty)</td>
                                        }
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }                

                <!-- LINE CHART --> 
                <div class="row">
                    <font class="text-start fs-6 text-light fw-bold">YIED TREND</font>
                    <hr />
                </div>
                <div>
                    <canvas class="mt-2" height="200" id="smoothLineChart"></canvas>
                </div>

                <!-- PIE CHART -->
                <div class="row">
                    <font class="text-start fs-6 text-light fw-bold">QUALITY ANOMANY OUTPUT</font>
                    <hr />
                </div>
                <div style="padding: 0px 10px;">
                    <canvas class="m-0 p-0 mx-5" height="200" width="200" id="myPieChart"></canvas>
                </div>
            </div>

        </div>
    </div>
</div>

@section Scripts {
    <link href="~/css/dashboard.css?@DateTime.Now.Ticks" rel="stylesheet" />

    <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels"></script>

    <script>
        //--------------------->> TABLE <<-------------------------------
            $(document).ready(function () {
            $('#tblDetail2 thead th').each(function (index) {
                $(this).css({
                    'background-color': '#00c0ff',
                    'padding': '10px 0px'
                });
                $(this).addClass('p-0 mx-2 py-1 fw-bold text-center');
                $(this).css({'font-size':'12px'});

            });

            $('#tblDetail2 tbody tr').each(function (index) {
            if ((index + 1) % 2 === 0) {
                $(this).find('td').addClass('bg-primary text-center text-white py-1');
                $(this).find('td').css({'font-size':'10px'});

            } else {
                $(this).find('td').removeClass('bg-primary');// Clear any inline styles
                $(this).find('td').addClass('text-white text-center py-1')
                $(this).find('td').css({'background-color':'#1c2b88', 'font-size':'10px'})
                // $(this).find('td').removeClass('bg-primary text-white');
            }
            });
        });
          function updateClock() {
            const now = new Date();

            const year = now.getFullYear();
            const month = String(now.getMonth() + 1).padStart(2, '0');
            const day = String(now.getDate()).padStart(2, '0');
            const hour = String(now.getHours()).padStart(2, '0');
            const minute = String(now.getMinutes()).padStart(2, '0');
            const second = String(now.getSeconds()).padStart(2, '0');

            const formatted = `${year}-${month}-${day} ${hour}:${minute}:${second}`;

            document.getElementById('clock').textContent = formatted;
          }

          // Update immediately and every second
          updateClock();
          setInterval(updateClock, 1000);


          //---------->> SMOOTH LINE CHART <<-------------------
          const chart_data = @Html.Raw(Json.Serialize(Model.line_chart));
          const labels = chart_data.map(item => item.label);
          const values = chart_data.map(item => item.value);

          const ctx = document.getElementById('smoothLineChart').getContext('2d');
          new Chart(ctx, {
              type: 'line',
              data: {
                  labels: labels,
                  datasets: [{
                      label: 'OK Rate',
                      data: values,
                      borderColor: 'rgba(75, 192, 192, 1)',
                      backgroundColor: 'rgba(75, 192, 192, 0.2)',
                      tension: 0.4, // smoothness (0 = straight lines, 1 = super curved)
                      fill: true,
                      pointRadius: 4,
                      pointBackgroundColor: '#fff',
                      pointBorderColor: 'rgba(75, 192, 192, 1)'
                  }]
              },
              options: {
                  responsive: true,
                  maintainAspectRatio: false,
                  plugins: {
                      legend: {
                          position: 'top',
                          labels:{
                              color:'lightgreen'
                          }
                      },
                        datalabels: {
                            align: 'top',       // position label above point
                            anchor: 'end',
                            color: 'cyan',      // text color
                            font: { weight: 'bold' },
                            formatter: (value) => value.toFixed(2) + '%' // format value
                        }
                  },
                  scales: {
                      x: {
                        ticks: {
                            // color: labels.map((_, i) => i % 2 === 0 ? 'red' : 'blue') // alternating label colors
                            color: '#ffffff'
                        }
                    },
                    y: {
                        beginAtZero: true,
                        ticks: {
                            color: '#ffffff'
                        }
                    }
                  }
              },
              plugins:[ChartDataLabels]
          });

        //--------------------->> PIE CHART <<------------------------------


        const pie_data = @Html.Raw(Json.Serialize(Model.chart_data2));
        const pie_labels = pie_data.map(item => item.label);
        const pie_values = pie_data.map(item => item.value);

        const ctx2 = document.getElementById('myPieChart').getContext('2d');

        new Chart(ctx2, {
            type: 'pie',
            data: {
                labels: pie_labels,
                datasets: [{
                    label: 'Colors',
                    data: pie_values,
                    backgroundColor: [
                      '#28a745', // green
                      '#dc3545', // red
                      '#ffc107', // yellow
                      '#0dcaf0', // cyan
                      '#6f42c1', // purple
                      '#fd7e14', // orange
                      '#20c997', // teal
                      '#6610f2', // indigo
                      '#198754', // dark green
                      '#e83e8c', // pink
                      '#17a2b8', // info blue
                      '#343a40', // dark gray
                      '#adb5bd', // light gray
                      '#ff6384', // soft red
                      '#36a2eb', // soft blue
                      '#ff9f40', // soft orange
                      '#4bc0c0', // turquoise
                      '#9966ff', // violet
                      '#c9cbcf', // light silver
                      '#f94144', // coral red
                    ],
                    borderColor: '#fff',
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {

                        labels:{
                //              generateLabels: function(chart) {
                //     const original = Chart.overrides.doughnut.plugins.legend.labels.generateLabels(chart);
                //     original.forEach(label => {
                //         if (label.text.length > 15) {
                //             // break into two lines
                //             label.text = label.text.match(/.{1,15}/g);
                //         }
                //     });
                //     return original;
                // },
                            boxWidth: 40,
                            padding: 5,
                            color: '#ffffff',
                            font:{
                                size:8
                            }
                        },

                        position: 'right'
                    },
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                const value = context.raw;
                                const total = context.chart.data.datasets[0].data
                                    .reduce((a, b) => a + b, 0);
                                const percent = ((value / total) * 100).toFixed(1);
                                return `${context.label}: ${value} (${percent}%)`;
                            }
                        }
                    }
                }
            }
        });
    </script>
}