@using MESWebDev.Common
@using MESWebDev.Models.IQC.VM
@using MESWebDev.Models.ProdPlan
@using MESWebDev.Services
@inject ITranslationService TranslationService
@model ProdPlanViewModel

@{
    var languageCode = Context.Session.GetString("LanguageCode") ?? "vi";
    ViewData["Title"] = TranslationService.GetTranslation("MenuManagement", languageCode);
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}
@section ContentHeader {
    @await Html.PartialAsync("_Breadcrumb", ViewBag.Breadcrumbs as List<MESWebDev.DTO.BreadcrumbItemDto>)
}
@try
{

    <div class="app-content">
        <div class="container-fluid">
            <div class="row">
                <div class="col-12">
                    <div class="card">
                        <div class="card-header">
                            <div class="float-start d-flex justify-content-center align-items-center">
                                <h3 class="card-title fw-bold fs-6">
                                    @* Production Plan *@
                                    @if (Model.start_sch_dt != null)
                                    {
                                        <span class="lastRun badge bg-success fs-6 p-2">
                                            Last run: @Convert.ToDateTime(Model.start_sch_dt).ToString("yyyy-MM-dd HH:mm:ss")
                                        </span>
                                    }
                                </h3>
                                <div class="btn-group ms-2 rounded-2" role="group">
                                    <button id="zoomIn" class="btn btn-sm btn-outline-success fw-bold">
                                        <i class="bi bi-zoom-in fw-bold"></i>
                                    </button>
                                    <button id="zoomOut" class="btn btn-sm btn-outline-success fw-bold">
                                        <i class="bi bi-zoom-out fw-bold"></i>
                                    </button>
                                </div>
                            </div>
                            <div class="float-end d-flex justify-content-center align-items-center">

                                <a class="btn btn-info btn-sm bt_upload me-2">
                                    <i class="bi bi-file-earmark-arrow-up"></i>
                                    Upload</a>
                                <a class="btn btn-success btn-sm bt_reload me-2">
                                    <i class="bi bi-arrow-clockwise"></i>
                                    Reload
                                </a>
                                @* <a class="btn btn-secondary btn-sm bt_master me-2">Master</a> *@
                                <a class="btn btn-primary btn-sm bt_save me-2">
                                    <i class="bi bi-floppy"></i>
                                    Save</a>
                                <a asp-action="DownloadProdPlan" asp-controller="ProdPlan" class="btn btn-secondary btn-sm me-2">
                                    <i class="bi bi-download"></i>
                                    Download
                                </a>

                                @* This for master setting *@
                                <div class="dropdown">
                                    <button class="btn btn-sm btn-warning dropdown-toggle" data-bs-toggle="dropdown">
                                        <i class="bi bi-gear"></i>
                                    </button>
                                    <ul class="dropdown-menu">
      @*                                   <li>
                                            <a class="dropdown-item" href="#" data-bs-toggle="modal" data-bs-target="#whModal">
                                                <i class="bi bi-calendar3"></i>
                                                Working Hour
                                            </a>

                                        </li> *@
                                        <li>
                                            <a class="dropdown-item" href="#" data-bs-toggle="modal" data-bs-target="#holidayModal">
                                                <i class="bi bi-calendar-date"></i>
                                                Holiday
                                            </a>

                                        </li>
                                        <li>
                                            <a class="dropdown-item" href="#" data-bs-toggle="modal" data-bs-target="#paraModal">
                                                <i class="bi bi-file-earmark-ppt-fill"></i>
                                                Parameter
                                            </a>
                                        </li>
                                    </ul>
                                    <partial name="__Holiday" model="@Model.holidays" />
                                    <partial name="__Parameter" model="@Model" />
                                    <partial name="__WorkingHour" model="@Model" />
                                </div>
                            </div>
                        </div>
                        <div class="card-body" >
                            @* <h2>Product Schedule (Resource Timeline View)</h2> *@
                            <div style="max-height: calc(100vh - 250px); overflow-y: auto; position:relative" id='calendar'></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <Partial name="_Upload" />
    <Partila name="_LoadingPartial" />
}
catch(Exception ex)
{
    string t = ex.Message;
}
@*         /* ------+ 2025-07-08 +-------
            Pending task:
            1. save working hour settup
            2. Bind it here
            3. Calculate base on line/date/working hour
        */ *@

@section Scripts {
    <link href="~/css/prodplan.css?@DateTime.Now.Ticks" rel="stylesheet" />
    <script src="~/js/index.global.min.js"></script>
    <script src="~/js/loadingpage.js?@DateTime.Now.Ticks"></script>
    <script src="~/js/pp_holidayCalendar.js?@DateTime.Now.Ticks"></script>
    <script src="~/js/pp_prodPlanSchedule.js?@DateTime.Now.Ticks"></script>
    <script src="~/js/pp_workingCalendar.js?@DateTime.Now.Ticks"></script>
    @using System.Text.Json
    <script>
        $(document).ready(function(){
            initHolidayCalendarModal();
            initWorkingCalendarModel();
        });
        // --- Show Upload Windows --- \\
        $('.bt_upload').click( function(){
             $('#uploadModal').modal('show');
        });

        $(document).on('click','.bt_save',function(){
             ProcessData('SaveProdPlan');
        });

        $(document).on('click','.bt_reload',function(){
            if(hasChanges)
            {
                ProcessData('ReloadProdPlan');
            }
            else{
                toastr.error('Nothing changes !');
            }
        });

        $(document).on('click','#saveparas',function(){
            var data = $('#fUpdatePara').serialize()
            //alert(data);
            $.ajax({
                url: '/ProdPlan/UpdatePara',
                method: 'POST',
                data: data,
                cache: false,
                success: function(data){
                    toastr.success(data);
                    hasChanges = true;
                    $('#paraModal').modal('hide'); // Hide the modal after saving
                },
                error: function () {
                    alert('Error saving events.');
                }
            });
        });

        // CHECK if UTC + 7 or not ???
        const offsetMs = 7 * 60 * 60 * 1000;

        function ProcessData(title) {
            const events = calendar.getEvents(); // Get all current events
            const updatedEvents = events.map(e => {
                return {
                    id: e.id,
                    resourceId: e.getResources()[0]?.id,
                    start: new Date(e.start.toLocaleString()),
                    end: new Date(e.start.toLocaleString()),
                    backgroundColor: e.backgroundColor,
                    borderColor:e.borderColor,
                    title: e.title,
                     ...e.extendedProps ///Include extra data like model, lot_no, qty
                };
            });

            const ppv = {
                events: updatedEvents,
                holidays:holidays,
                resources:resources,
                new_model_rate: parseInt($('#new_model_rate').val()),
                model_stransfer_time: parseInt($('#model_stransfer_time').val()),
                start_sch_dt: start_sch_dt // Assuming this is a Date object
            };

            // Send to controller via AJAX
            $.ajax({
                url: '/ProdPlan/'+title,
                method: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(ppv),
                success: function (data) {
                    ReloadProdPlan(data)
                },
                error: function () {
                    alert('Error saving events.');
                }
            });
        }
        
        // Test Holidays
        //const holidays = ["2025-06-20","2025-06-21","2025-06-22"];  

        let holidays = @Html.Raw(JsonSerializer.Serialize(Model.holidays));
        //alert(holidays);
        const events = @Html.Raw(JsonSerializer.Serialize(Model.events));
        let resources = @Html.Raw(JsonSerializer.Serialize(Model.resources));
        let start_sch_dt = new Date(@Html.Raw(JsonSerializer.Serialize(Model.start_sch_dt)));


        let lastClickTime = 0;
        let calendar; // Declare it in a higher scope
        let hasChanges = false;
        loadProPlanSchedule();

        function ReloadProdPlan(data){
            toastr.success(data.message,'',{
                closeButton: true,
                progressBar: true,
                timeOut: 1000
            });
            // Reload calendar events
            // Update holidays
            holidays = data.holidays;
            // resources = data.resources;
                // Remove existing highlights
            document.querySelectorAll('.fc-day-holiday').forEach(cell => {
                cell.classList.remove('fc-day-holiday');
            });
            holidays.forEach(dateStr => {
                //alert(dateStr);
                // document.querySelectorAll(`[data-date='${dateStr}']`).forEach(cell => {
                document.querySelectorAll(`[data-date='${dateStr}'], [data-date^='${dateStr}T']`)
                    .forEach(cell => {
                        cell.classList.add('fc-day-holiday');
                    });
            });
            calendar.removeAllEvents();
            calendar.addEventSource(data.events);
            $('.lastRun').html('Last run: '+data.start_sch_dt);
            // Optional: Use start_sch_dt or resources
            console.log("Start schedule date:", data.start_sch_dt);
            // calendar.setOption("resources", data.resources); // if needed

            hasChanges = false;
            //alert(formatDateTime(start_sch_dt));
        }
        // initHolidayCalendarModal();

        let zoomLevel = 1;
        const minZoom = 0.5;
        const maxZoom = 2;
        const baseSlotWidth = 100; // base width in pixels

        function applyZoom() {
          const scaledWidth = baseSlotWidth * zoomLevel;
          calendar.setOption('slotMinWidth', scaledWidth);
          document.querySelector('#calendar').style.fontSize = `${zoomLevel}em`;
          calendar.updateSize(); // apply layout update
        }

        document.getElementById('zoomIn').addEventListener('click', () => {
          if (zoomLevel < maxZoom) {
            zoomLevel += 0.1;
            applyZoom();
          }
        });

        document.getElementById('zoomOut').addEventListener('click', () => {
          if (zoomLevel > minZoom) {
            zoomLevel -= 0.1;
            applyZoom();
          }
        });
    </script>
}