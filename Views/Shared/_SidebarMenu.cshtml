
@model List<FunctionModel>

<!--Added 2025/04/22-->

@{   

    int? activeMenuId = ViewData["ActiveMenuId"] as int?;
}

@functions {
    bool IsAncestor(FunctionModel menu, int? activeMenuId)
    {
        if (menu.Id == activeMenuId)
            return true;

        if (menu.Children != null)
        {
            foreach (var child in menu.Children)
            {
                if (IsAncestor(child, activeMenuId))
                    return true;
            }
        }
        return false;
    }
}

@{
    var currentUrl = Context.Request.Path.ToString().ToLower();
    var rootMenus = Model.Where(m => m.ParentId == null).ToList();
    @* Debug *@
    <!-- currentUrl = @currentUrl -->
}

@foreach (var menu in rootMenus)
{
    bool isExpanded = IsAncestor(menu, activeMenuId);

    <li class="nav-item @(isExpanded ? "menu-open" : "")">
        <a href="@(string.IsNullOrEmpty(menu.Action) ? "#" : Url.Action(menu.Action,menu.Controller))" class="nav-link @(isExpanded ? "active" : "")">
            <i class="nav-icon @(menu.IconString ?? "bi bi-circle")"></i>
            <p>
                @menu.EnName
                @if (menu.Children?.Any() == true)
                {
                    <i class="nav-arrow bi bi-chevron-right"></i>
                }
            </p>
        </a>

        @if (menu.Children?.Any() == true)
        {
            <ul class="nav nav-treeview ps-3">
                @foreach (var child in menu.Children)
                {
                    @await Html.PartialAsync("_SidebarMenuItem", child)
                }
            </ul>
        }
    </li>
}