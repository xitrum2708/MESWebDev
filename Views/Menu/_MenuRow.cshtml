@model MESWebDev.Models.VM.MenuRowViewModel

@{
    var menu = Model.Function;
    var level = Model.Level;
    var indent = new string('–', level * 3);
}

<tr>
    <td>@menu.Order</td>
    <td>@(indent) @menu.EnName</td>
    <td>@(indent) @menu.ViName</td>
    @* <td>@(menu.ParentId.HasValue ? "Has Parent" : "None")</td> *@

    <td>@menu.Controller</td>
    <td>@menu.Action</td>
    <td>@menu.IconString</td>
    @*    <td>@menu.Note</td>*@
    <td>@(menu.IsActive ? "Yes" : "No")</td> 
    <td class="d-flex justify-content-between align-content-center">
        <a href="@Url.Action("Edit", "Menu", new { id = menu.Id })" class="btn btn-warning btn-sm">
            <i class="bi bi-pencil"></i> Edit
        </a>
        <form asp-action="Delete" asp-route-id="@menu.Id" method="post" style="display:inline;" onsubmit="return confirm('Are you sure you want to delete this menu?');">
            @Html.AntiForgeryToken()
            <button type="submit" class="btn btn-danger btn-sm">
                <i class="bi bi-trash"></i> Delete
            </button>
        </form>
    </td>
</tr>

@if (menu.Children != null && menu.Children.Any())
{
    foreach (var child in menu.Children)
    {
        @await Html.PartialAsync("_MenuRow", new MESWebDev.Models.VM.MenuRowViewModel { Function = child, Level = level + 1 })
    }
}