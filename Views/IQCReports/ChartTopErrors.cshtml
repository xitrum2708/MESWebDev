@using MESWebDev.Models.IQC.VM
@using MESWebDev.Services
@inject ITranslationService TranslationService
@model PartCodePoChartViewModel

@{
    var languageCode = Context.Session.GetString("LanguageCode") ?? "vi";
    ViewData["Title"] = TranslationService.GetTranslation("TopErrorReport", languageCode);
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}
@section ContentHeader {
    @await Html.PartialAsync("_Breadcrumb", ViewBag.Breadcrumbs as List<MESWebDev.DTO.BreadcrumbItemDto>)
}
<div class="app-content">
    <div class="container-fluid">
        <div class="row">
            <div class="col-12">
                <div class="card">
                    @* <div class="card-header">
                        <h3 class="card-title">@TranslationService.GetTranslation("TopErrorReport", languageCode)</h3>
                        <div class="card-tools">
                        </div>
                    </div> *@
                    <div class="card-body">
                        <!-- Form lọc: chia 2 hàng nếu cần -->
                        <div class="row">
                            <form method="get" asp-action="ChartTopErrors" class="mb-12">
                                <div class="row g-3">
                                    <!-- Row 1: StartDate và EndDate -->
                                    <div class="col-md-4">
                                        <div class="form-group">
                                            <label class="form-label" for="startDate">
                                                @TranslationService.GetTranslation("StartDate", languageCode)
                                            </label>
                                            <input type="date" id="startDate" name="startDate" class="form-control"
                                                    value="@(Model.StartDate.HasValue ? Model.StartDate.Value.ToString("yyyy-MM-dd") : "")" />
                                        </div>
                                    </div>
                                    <div class="col-md-4">
                                        <div class="form-group">
                                            <label class="form-label" for="endDate">
                                                @TranslationService.GetTranslation("EndDate", languageCode)
                                            </label>
                                            <input type="date" id="endDate" name="endDate" class="form-control"
                                                    value="@(Model.EndDate.HasValue ? Model.EndDate.Value.ToString("yyyy-MM-dd") : "")" />
                                        </div>
                                    </div>
                                    <div class="col-md-2 d-flex align-items-end">
                                        <button type="submit" class="btn btn-primary w-100">@TranslationService.GetTranslation("Filter", languageCode)</button>
                                    </div>
                                    <div class="col-md-2 d-flex align-items-end">
                                        @{
                                            var downloadModel = new DownloadButtonModel
                                            {
                                                Controller = "IQCReports",
                                                Action = "ExportToExcelPartcodeRateReport",
                                                RouteValues = new Dictionary<string, string>
                                                                        {
                                                                        { "startDate", Model.StartDate.HasValue ? Model.StartDate.Value.ToString("yyyy-MM-dd") : "" },
                                                                        { "endDate", Model.EndDate.HasValue ? Model.EndDate.Value.ToString("yyyy-MM-dd") : "" },
                                                                        },
                                                ButtonText = TranslationService.GetTranslation("ExportToExcel", languageCode)
                                            };
                                        }
                                        <div class="w-100">
                                            @await Html.PartialAsync("_DownloadButton", downloadModel)
                                        </div>
                                    </div>
                                </div>                           
                            </form>
                        </div>
                        <!-- Khung biểu đồ -->
                        <div class="row">
                            <div class="chart-container" style="position: relative; height:600px; width:100%;">
                                <canvas id="topErrorsChart"></canvas>
                            </div>
                        </div>                   
                     </div>
                </div>
            </div>
        </div>
    </div>
 </div>

@section Scripts {
    <script src="~/js/chart.js"></script>
    <script src="~/js/chartjs-plugin-datalabels.js"></script>
    <script>
            document.querySelector('form').addEventListener('submit', function(e) {
            const startDate = document.querySelector('input[name="startDate"]').value;
            const endDate = document.querySelector('input[name="endDate"]').value;

            if (startDate && endDate && new Date(startDate) > new Date(endDate))
            {
                e.preventDefault();
                alert('Start Date cannot be later than End Date.');
            }
        });
        const labels = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Labels));
        const data = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.POAccept));
        const poQtyData=@Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.POReject));
        var errorRateData = @Html.Raw(Json.Serialize(Model.AcceptRate));


        const ctx = document.getElementById('topErrorsChart').getContext('2d');
        const chart = new Chart(ctx, {           
            data: {                
                labels: labels,
                datasets: [{
                    type:'bar',
                    label: '@TranslationService.GetTranslation("POAccepted", languageCode)',
                    data: data,
                     backgroundColor: 'rgba(75,192,192,0.6)',
                    borderColor: 'rgba(75,192,192,1)',
                                   
                    borderWidth: 1,
                    // Giảm độ rộng cột
                    barThickness: 40,           // Chiều rộng cố định của cột, bạn có thể điều chỉnh giá trị này
                    maxBarThickness: 50,        // Chiều rộng tối đa của cột (nếu cần)
                    categoryPercentage: 0.5,    // Tỷ lệ chiếm không gian của từng cột trong nhóm
                    barPercentage: 0.8,          // Tỷ lệ cột so với không gian dành cho cột
                    yAxisID: 'y1'
                },
                {
                    type:'bar',
                    label: '@TranslationService.GetTranslation("PORejected", languageCode)',
                    data: poQtyData,
                    backgroundColor: 'rgba(95,15,152,0.6)',
                    borderColor: 'rgba(95,15,152,1)',
                    borderWidth: 1,
                    // Giảm độ rộng cột
                    barThickness: 40,           // Chiều rộng cố định của cột, bạn có thể điều chỉnh giá trị này
                    maxBarThickness: 50,        // Chiều rộng tối đa của cột (nếu cần)
                    categoryPercentage: 0.5,    // Tỷ lệ chiếm không gian của từng cột trong nhóm
                    barPercentage: 0.8,          // Tỷ lệ cột so với không gian dành cho cột
                    yAxisID: 'y1'
                }
                ,
                {   type:'line',
                    label: '@TranslationService.GetTranslation("AcceptRate", languageCode)',
                    data: errorRateData,
                    backgroundColor: 'rgba(255, 206, 86, 0.2)',
                    borderColor: 'rgba(255, 206, 86, 1)',
                    borderWidth: 2,
                    // Giảm độ rộng cột
                    barThickness: 40,           // Chiều rộng cố định của cột, bạn có thể điều chỉnh giá trị này
                    maxBarThickness: 50,        // Chiều rộng tối đa của cột (nếu cần)
                    categoryPercentage: 0.5,    // Tỷ lệ chiếm không gian của từng cột trong nhóm
                    barPercentage: 0.8,          // Tỷ lệ cột so với không gian dành cho cột
                    yAxisID: 'y2'
                }
                ]
            },
            options: {
                responsive: true,            // Biểu đồ tự co giãn
                maintainAspectRatio: false,  // Nếu muốn biểu đồ chiếm hết chiều cao container
                scales: {
                        y1: {
                            type:'linear',
                            position:'left',
                            beginAtZero: true,
                            title: {
                            display: true,
                            text: '@TranslationService.GetTranslation("POCount", languageCode)'
                        }
                    },
                    y2: {
                            type:'linear',
                            position:'right',
                            beginAtZero: true,
                            title: {
                                        display: true,
                                        text: 'Accepted Rate'
                                    },
                            grid: {
                                    drawOnChartArea: false // Ẩn đường lưới trục x
                                },
                        ticks: {
                            autoSkip: false,     // Tùy chọn: tắt autoSkip nếu bạn muốn hiện tất cả nhãn
                            maxRotation: 45,     // Tùy chọn: xoay nhãn x khi màn hình hẹp
                            minRotation: 0
                        }
                    }
                },
                plugins: {
                     // Cấu hình hiển thị số trực tiếp trên các cột/bar/dòng
                    datalabels: {
                    display: true,
                    color: 'black',
                    anchor: 'end',
                    align: 'top',
                        formatter: function(value, context) {
                            // Hiển thị giá trị như số nguyên nếu dataset đang là bar,
                            // hoặc có thể định dạng lại nếu cần, ví dụ: 0.00 cho line
                            if(context.dataset.type === 'bar'){
                                return typeof value === 'number' ? value.toLocaleString() : value;
                            } else {
                                return value.toFixed(2);
                            }
                        }
                    },
                    legend: {
                        display: true
                    },
                    tooltip: {
                        enabled: true
                    }
                }
            },
             plugins: [ChartDataLabels]  // Đảm bảo plugin được đăng ký
        });
    </script>
}
